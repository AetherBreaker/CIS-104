Code output:
10
11
Final Report:  12 15 18

Every time print() is called, its output is placed on a newline. Additionally, when printing
more than one value with a single print() statement, the values are always joined together by
a single space, and since the string in the last print statement contains a single space already
it results in two spaces before the 12.

1. variable: "list" is initialized with values: 10, 11, 12, 13, 14, 15, 17, 18, 19, and 20
2. variable: "counter" is initialized with value 0
3. begin looping over each variable: "n" in "list"
    4. local variable: "n" is initialized with value of list index of 0 | "n" = 10
    5. variable: "counter" is set equal to "counter" + 1 | "counter" = 1
    6. check if "counter" is less than 3 | returns True
        7. print "n" to the console | prints "10" to the console
    8. continue to next iteration of loop
    9. local variable: "n" is set to value of list index of 1 | "n" = 11
    10. variable: "counter" is set equal to "counter" + 1 | "counter" = 2
    11. check if "counter" is less than 3 | returns True
        12. print "n" to the console | prints "11" to the console
    13. continue to next iteration of loop
    14. local variable: "n" is set to value of list index of 2 | "n" = 12
    15. variable: "counter" is set equal to "counter" + 1 | "counter" = 3
    16. check if "counter" is less than 3 | returns False
    17. continue to next iteration of loop
    18. local variable: "n" is set to value of list index of 3 | "n" = 13
    19. variable: "counter" is set equal to "counter" + 1 | "counter" = 4
    20. check if "counter" is less than 3 | returns False
    21. continue to next iteration of loop
    22. local variable: "n" is set to value of list index of 4 | "n" = 14
    23. variable: "counter" is set equal to "counter" + 1 | "counter" = 5
    24. check if "counter" is less than 3 | returns False
    25. continue to next iteration of loop
    26. local variable: "n" is set to value of list index of 5 | "n" = 15
    27. variable: "counter" is set equal to "counter" + 1 | "counter" = 6
    28. check if "counter" is less than 3 | returns False
    29. continue to next iteration of loop
    30. local variable: "n" is set to value of list index of 6 | "n" = 17
    31. variable: "counter" is set equal to "counter" + 1 | "counter" = 7
    32. check if "counter" is less than 3 | returns False
    33. continue to next iteration of loop
    34. local variable: "n" is set to value of list index of 7 | "n" = 18
    35. variable: "counter" is set equal to "counter" + 1 | "counter" = 8
    36. check if "counter" is less than 3 | returns False
    37. continue to next iteration of loop
    38. local variable: "n" is set to value of list index of 8 | "n" = 19
    39. variable: "counter" is set equal to "counter" + 1 | "counter" = 9
    40. check if "counter" is less than 3 | returns False
    41. continue to next iteration of loop
    42. local variable: "n" is set to value of list index of 9 | "n" = 20
    43. variable: "counter" is set equal to "counter" + 1 | "counter" = 10
    44. check if "counter" is less than 3 | returns False
45. for loop receives a StopIteration exception from "list"'s iterator and exits the loop
46. print "Final Report: ", list index of 2, list index of 5, list index of 7 to the console
    | prints "Final Report:  12 15 18" to the console
47. SystemExit exception is raised and the program exits



note: steps 22 through 44 were almost entirely generated automatically by copilot based off
the rest of the text in this document, and this isnt even a programming language!



bonus: more efficient version of the code in the image:

scores = [10, 11, 12, 13, 14, 15, 17, 18, 19, 20]  
# never name a variable "list" as this shadows the built-in list() function

for index, item in enumerate(scores):
    if index + 1 < 3:   # example code increments counter before checking if it's less than 3 so we need to add 1
        print(item)
